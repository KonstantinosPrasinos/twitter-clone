generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model followers {
  follower_id                              Int       @id @default(autoincrement())
  follower_user_id                         Int?
  following_user_id                        Int?
  created_at                               DateTime? @default(now()) @db.Timestamp(6)
  users_followers_follower_user_idTousers  users?    @relation("followers_follower_user_idTousers", fields: [follower_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  users_followers_following_user_idTousers users?    @relation("followers_following_user_idTousers", fields: [following_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}
model likes {
  like_id    Int       @id @default(autoincrement())
  user_id    Int?
  post_id    Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  posts      posts?    @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}
model posts {
  post_id    Int       @id @default(autoincrement())
  user_id    Int?
  content    String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  replies    replies[]
  reposts    reposts[]
  likes      likes[]   
}

model replies {
  reply_id   Int       @id @default(autoincrement())
  user_id    Int?
  post_id    Int?
  content    String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  posts      posts?    @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model reposts {
  repost_id  Int       @id @default(autoincrement())
  user_id    Int?
  post_id    Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  posts      posts?    @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  user_id                                      Int         @id @default(autoincrement())
  username                                     String      @unique @db.VarChar(50)
  email                                        String      @unique @db.VarChar(100)
  password_hash                                String      @db.VarChar(100)
  isadmin                                      Boolean?    @default(false)
  created_at                                   DateTime?   @default(now()) @db.Timestamp(6)
  followers_followers_follower_user_idTousers  followers[] @relation("followers_follower_user_idTousers")
  followers_followers_following_user_idTousers followers[] @relation("followers_following_user_idTousers")
  likes                                        likes[]
  posts                                        posts[]
  replies                                      replies[]
  reposts                                      reposts[]
}
